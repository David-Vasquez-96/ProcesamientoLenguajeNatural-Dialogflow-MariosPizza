// See https://github.com/dialogflow/dialogflow-fulfillment-nodejs
// for Dialogflow fulfillment library docs, samples, and to report issues
'use strict';
 
const functions = require('firebase-functions');
const {WebhookClient} = require('dialogflow-fulfillment');
const {Card, Suggestion} = require('dialogflow-fulfillment');
 
const admin = require ('firebase-admin');
var firebaseConfig = {
    apiKey: "AIzaSyA0cOIHonbRpnGHEzr2KTXLOHaQ28ud1A8",
    authDomain: "mario-spizza-dncdfh.firebaseapp.com",
    databaseURL: "https://mario-spizza-dncdfh.firebaseio.com",
    projectId: "mario-spizza-dncdfh",
    storageBucket: "mario-spizza-dncdfh.appspot.com",
    messagingSenderId: "258735015956",
    appId: "1:258735015956:web:d3d7633fcb52a4766e3f01",
    measurementId: "G-FJ9QTZB6FL"
};
//admin.firebase.initializeApp(firebaseConfig);
//admin.firebase.analytics();
admin.initializeApp(functions.config().firebase);
const db = admin.firestore();

process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements
 
exports.dialogflowFirebaseFulfillment = functions.https.onRequest((request, response) => {
  const agent = new WebhookClient({ request, response });
  console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
  console.log('Dialogflow Request body: ' + JSON.stringify(request.body));
 
  function welcome(agent) {
    agent.add(`Hola, te saluda Mario. El asistente Virtual de Mario's Pizza, escribe "Ordenar Pizza".!`);
    agent.add(new Suggestion('Ordenar Pizza'));
  }
 
  function fallback(agent) {
    agent.add(`I didn't understand`);
    agent.add(`I'm sorry, can you try again?`);
  }
  
  function orden(agent){
    const tipopizza =	agent.parameters.tipopizza;
    const PedidoPizza = agent.parameters.PedidoPizza;
  	const nombre = 		agent.parameters.nombre;
    const telefono = 	agent.parameters.telefono;
    const direccion = 	agent.parameters.direccion;
   
    //agent.add('Excelente ' +nombre+' ' +PedidoPizza.original+' ' +' ha sido confirmado con √©xito, nuestro repartidor se estar√° comunicando con usted al tel√©fono '+telefono+ ' que nos brindo, para hacerle entrega de su pedido a direcci√≥n '+ direccion);
  }
  
  function ordenar(agent){
  	agent.add('¬øQu√© tipo de Pizza desea ordenar? especial, hawaiana, peperoni, jamon');
    agent.add(new Suggestion('una Especial grande'));
    agent.add(new Suggestion('una Hawaiana grande'));
    agent.add(new Suggestion('una Peperoni grande'));
    agent.add(new Suggestion('una Jamon grande'));
    agent.add(new Suggestion('una Especial mediana'));
    agent.add(new Suggestion('una Hawaiana mediana'));
    agent.add(new Suggestion('una Peperoni mediana'));
    agent.add(new Suggestion('una Jamon mediana'));
  }
  
  function ordenar2(agent){
    const PedidoPizza = agent.parameters.PedidoPizza;
  	const nombre = agent.parameters.nombre;
    const telefono = agent.parameters.telefono;
    const direccion = agent.parameters.direccion;
    
    const dialogflowAgentRef = db.collection('ordenarpizza').doc();
    return db.runTransaction(t => {
    	t.set(dialogflowAgentRef, {
        	PedidoPizza: PedidoPizza, Nombre: nombre, Telefono: telefono, Direccion: direccion 
        });
      return Promise.resolve('Completo');
    }).then(doc => {
    	//agent.add('Excelente '+nombre+' '+PedidoPizza+' su pedido a sido confirmado con exito.');
    }).catch(err => {
    	console.log('Error en escribir en Firestore');
      	agent.add('fallo en escribir los datos en firestore');
    });
  }

  // // Uncomment and edit to make your own intent handler
  // // uncomment `intentMap.set('your intent name here', yourFunctionHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function yourFunctionHandler(agent) {
  //   agent.add(`This message is from Dialogflow's Cloud Functions for Firebase editor!`);
  //   agent.add(new Card({
  //       title: `Title: this is a card title`,
  //       imageUrl: 'https://developers.google.com/actions/images/badges/XPM_BADGING_GoogleAssistant_VER.png',
  //       text: `This is the body text of a card.  You can even use line\n  breaks and emoji! üíÅ`,
  //       buttonText: 'This is a button',
  //       buttonUrl: 'https://assistant.google.com/'
  //     })
  //   );
  //   agent.add(new Suggestion(`Quick Reply`));
  //   agent.add(new Suggestion(`Suggestion`));
  //   agent.setContext({ name: 'weather', lifespan: 2, parameters: { city: 'Rome' }});
  // }

  // // Uncomment and edit to make your own Google Assistant intent handler
  // // uncomment `intentMap.set('your intent name here', googleAssistantHandler);`
  // // below to get this function to be run when a Dialogflow intent is matched
  // function googleAssistantHandler(agent) {
  //   let conv = agent.conv(); // Get Actions on Google library conv instance
  //   conv.ask('Hello from the Actions on Google client library!') // Use Actions on Google library
  //   agent.add(conv); // Add Actions on Google library responses to your agent's response
  // }
  // // See https://github.com/dialogflow/fulfillment-actions-library-nodejs
  // // for a complete Dialogflow fulfillment library Actions on Google client library v2 integration sample

  // Run the proper function handler based on the matched Dialogflow intent name
  let intentMap = new Map();
  intentMap.set('Default Welcome Intent', welcome);
  intentMap.set('Default Fallback Intent', fallback);
  intentMap.set('Ordenes.pizzaespecial', orden);
  intentMap.set('Ordenes', ordenar);
  intentMap.set('Ordenes.pizzaespecial', ordenar2);
  // intentMap.set('your intent name here', yourFunctionHandler);
  // intentMap.set('your intent name here', googleAssistantHandler);
  agent.handleRequest(intentMap);
});
